# Define file paths
$inputFilePath = "input.txt"
$outputFilePath = "http_ports_scan_results.txt"

# Read IP addresses from the input file
$ipAddresses = Get-Content -Path $inputFilePath

# Define common HTTP ports
$httpPorts = @(80, 443, 8080, 9200, 8008, 8000, 9000, 8443, 8888, 8181, 9443, 1080)

# Function to scan HTTP ports for a given IP address
function ScanHttpPorts($targetIp) {
    $openHttpPorts = $httpPorts | Where-Object { Test-NetConnection -ComputerName $targetIp -Port $_ -InformationLevel Quiet }

    if ($openHttpPorts) {
        Write-Host "HTTP ports open on {$targetIp}: $($openHttpPorts -join ', ')"
        Add-Content -Path $outputFilePath -Value "HTTP ports open on {$targetIp}: $($openHttpPorts -join ', ')"
    }
    else {
        Write-Host "No open HTTP ports found on $targetIp."
        Add-Content -Path $outputFilePath -Value "No open HTTP ports found on $targetIp."
    }
}

# Function to create and execute a runspace for each IP address
function Run-MultiThreaded {
    param (
        [scriptblock]$scriptblock,
        [array]$collection
    )

    $runspacePool = [runspacefactory]::CreateRunspacePool(1, [Environment]::ProcessorCount)
    $runspacePool.Open()

    $runspaces = @()

    foreach ($item in $collection) {
        $runspace = [powershell]::Create().AddScript($scriptblock).AddArgument($item).RunspacePool($runspacePool)
        $runspaces += [PSCustomObject]@{ Pipe = $runspace; Status = $runspace.BeginInvoke() }
    }

    $runspaces | ForEach-Object {
        $_.Pipe.EndInvoke($_.Status)
        $_.Pipe.Dispose()
    }

    $runspacePool.Close()
    $runspacePool.Dispose()
}

# Script block to be executed for each IP address
$scriptBlock = {
    param ($ip)
    ScanHttpPorts -targetIp $ip
}

# Run multi-threaded scanning
Run-MultiThreaded -scriptblock $scriptBlock -collection $ipAddresses

Write-Host "Scan complete. Results saved to $outputFilePath."