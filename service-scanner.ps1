# Define file paths
$inputFilePath = "input.txt"
$outputFilePath = "service_ports_scan_results.txt"

# Read IP addresses from the input file
$ipAddresses = Get-Content -Path $inputFilePath

# Define common service ports
$ServicePorts = @(2375, 2376, 139, 445, 137, 138, 389, 636, 3268, 3269, 512, 513, 514, 873, 1026, 1098, 1099, 1050, 2049, 3389, 5000, 5671, 5672, 5800, 5801, 5900, 5901, 5985, 5986, 6379, 8089)

# Function to scan service ports for a given IP address
function ScanServicePorts($targetIp) {
    foreach ($port in $ServicePorts) {
        $tcpClient = New-Object System.Net.Sockets.TcpClient

        $connectionTask = $tcpClient.ConnectAsync($targetIp, $port)

        for ($i = 0; $i -lt 10; $i++) {
            # Wait for the connection to complete or timeout
            if ($connectionTask.IsCompleted) { break; }
            Start-Sleep -Milliseconds 100
        }
        $tcpClient.Close()
        $res = "filtered"
        if ($connectionTask.IsFaulted -and $connectionTask.Exception -match "actively refused") {
            $res = "Closed"
            Add-Content -Path $outputFilePath -Value "$ip : $port : $res"
        }
        elseif ($connectionTask.Status -eq "RanToCompletion") {
            $res = "Open"
            Add-Content -Path $outputFilePath -Value "$ip : $port : $res"
        }

    }

}

# Loop through each IP address and scan HTTP ports
foreach ($ip in $ipAddresses) {
    Write-Host "Scanning Service ports for $ip..."
    Add-Content -Path $outputFilePath -Value "Scanning Service ports for $ip..."
    ScanServicePorts -targetIp $ip
    Add-Content -Path $outputFilePath -Value "`n"
}


Write-Host "Scan complete. Results saved to $outputFilePath."